// Code generated by MockGen. DO NOT EDIT.
// Source: specs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cluster "sigs.k8s.io/kind/pkg/cluster"
)

// Mockprovider is a mock of provider interface.
type Mockprovider struct {
	ctrl     *gomock.Controller
	recorder *MockproviderMockRecorder
}

// MockproviderMockRecorder is the mock recorder for Mockprovider.
type MockproviderMockRecorder struct {
	mock *Mockprovider
}

// NewMockprovider creates a new mock instance.
func NewMockprovider(ctrl *gomock.Controller) *Mockprovider {
	mock := &Mockprovider{ctrl: ctrl}
	mock.recorder = &MockproviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockprovider) EXPECT() *MockproviderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Mockprovider) Create(name string, options ...cluster.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockproviderMockRecorder) Create(name interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockprovider)(nil).Create), varargs...)
}

// List mocks base method.
func (m *Mockprovider) List() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockproviderMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Mockprovider)(nil).List))
}
